
pipeline {
    agent { label 'maven' }
    environment {
        TEAMS_URL = 'https://outlook.office.com/webhook/97ff97f5-b5b6-47bf-8b87-a5303cfdb12d@521e430f-ba3c-4d47-9f97-16b945b0a850/JenkinsCI/785447a441c84a12b33ecc6d8150d959/dc81ee26-68e3-4127-a13f-1d6c9a472eb6'
        EMAIL_RECIPIENTS  = 'nicolas@ingenia.la'
        DEPLOY_CREDENTIALS = getEnv('DEPLOY_CREDENTIALS', env.BRANCH_NAME)
        DEPLOY_DIR = getEnv('DEPLOY_DIR', env.BRANCH_NAME)
    }
    options {
        office365ConnectorWebhooks([[
                    startNotification: true,
                    notifySuccess:true,
                    notifyAborted:false,
                    notifyNotBuilt:false,
                    notifyUnstable:true,
                    notifyFailure:true,
                    url: env.TEAMS_URL
            ]]
        )
    }
    stages {
        stage("Test") {
            when {
                allOf{
                    anyOf {
                        branch 'develop';
                        branch 'qa';
                        branch 'master';
                    }
                    expression { params.ONLY_DEPLOY != true }
                }
            }
            environment {
                CI = true
            }
            steps {
               sh 'npm i '
               sh 'npm test'
            }
            post {
                success{
                    publishChecks name: 'Test', title: 'Automated Tests'
                }
                failure {
                    publishChecks conclusion: 'FAILURE', status: 'COMPLETED', name: 'Test', title: 'Automated Tests'
                    emailext (
						to: env.EMAIL_RECIPIENTS,
						subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
						body: """<p>FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
						<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
						recipientProviders: [[$class: 'DevelopersRecipientProvider']]
					)
                }

            }
        }

       stage("SonarQube analysis") {
            when {
                allOf{
                    anyOf {
                        branch 'develop';
                        branch 'qa';
                        branch 'master';
                    }
                    expression { params.ONLY_DEPLOY != true }
                }
            }
            steps {
                script {
                    withSonarQubeEnv("Sonar-OCP") {
                        sh "/usr/local/sonar/bin/sonar-scanner -D'sonar.branch.name=${BRANCH_NAME}'"
                    }
                }
                withSonarQubeEnv("Sonar-OCP") {
                    waitForQualityGate abortPipeline: true
                }
            }
            post {
                success{
                    withSonarQubeEnv("Sonar-OCP") {
                        publishChecks name: 'Sonar', title: 'Sonar Analysis', detailsURL:"${env.SONAR_HOST_URL}"
                    }
                }
                failure {
                    withSonarQubeEnv("Sonar-OCP") {
						publishChecks conclusion: 'FAILURE', status: 'COMPLETED', name: 'Sonar', title: 'Sonar Analysis', text: "${env.SONAR_HOST_URL}"
					}
                    emailext (
						to: env.EMAIL_RECIPIENTS,
						subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
						body: """<p>FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
						<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
						recipientProviders: [[$class: 'DevelopersRecipientProvider']]
					)
                }
            }
        }
        stage('Build') {
            when {
                allOf{
                    anyOf {
                        branch 'develop';
                        branch 'qa';
                        branch 'master';
                    }
                    expression { params.ONLY_DEPLOY != true }
                }
            }
            steps {
               sh 'npm run build'
            }
            post {
                success {
                    archiveArtifacts 'build/**/*'
                    publishChecks name: 'Build', title: 'Build'
                }
                failure {
                    publishChecks conclusion: 'FAILURE', status: 'COMPLETED', name: 'Build', title: 'Build'
                    emailext (
						to: env.EMAIL_RECIPIENTS,
						subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
						body: """<p>FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
						<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
						recipientProviders: [[$class: 'DevelopersRecipientProvider']]
					)
                }
            }
        }
        stage('Deploy') {
             when {
                allOf{
                    anyOf {
                        branch 'develop';
//                        branch 'qa';
                    }
                    expression { params.ONLY_DEPLOY != true }
                }
            }
            steps {
                sshagent(credentials : [env.DEPLOY_CREDENTIALS]) {
                    sh 'ssh -o StrictHostKeyChecking=no -l gelec xnetlin1 mkdir -p $DEPLOY_DIR'
                    sh 'scp -o StrictHostKeyChecking=no -rp build/* gelec@xnetlin1:$DEPLOY_DIR/'
                }
            }
            post {
                success {
                    publishChecks name: 'Deploy', title: 'Deploy'
                }
                failure {
                    publishChecks conclusion: 'FAILURE', status: 'COMPLETED', name: 'Deploy', title: 'Deploy'
                    emailext (
						to: env.EMAIL_RECIPIENTS,
						subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
						body: """<p>FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
						<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
						recipientProviders: [[$class: 'DevelopersRecipientProvider']]
					)
                }
            }
        }
    }
}



def getEnv(varName, branchName) {
    def ENVVARS = [
        DEPLOY_CREDENTIALS:[
            develop: 'gelec-app-qa',
            qa: 'gelec-app-qa',
            master: 'gelec-app-qa'
        ],
        DEPLOY_DIR:[
            develop: '/opt/tomcat/Tomcat8_GELEC/webapps/GELEC/WEB-INF/classes/static',
            qa: '/opt/tomcat/Tomcat8_GELEC/webapps/GELEC/WEB-INF/classes/static',
            master: '/opt/tomcat/Tomcat8_GELEC/webapps/GELEC/WEB-INF/classes/static'
        ],

    ]
    def varOptions = ENVVARS[(varName)]
    def varValue = varOptions[(branchName)]
    if(varValue){
        return varValue
    }else{
        return varOptions['develop']
    }
}
