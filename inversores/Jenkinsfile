pipeline {
    agent { label 'maven' }
    environment {
        TEAMS_URL = 'https://outlook.office.com/webhook/97ff97f5-b5b6-47bf-8b87-a5303cfdb12d@521e430f-ba3c-4d47-9f97-16b945b0a850/JenkinsCI/785447a441c84a12b33ecc6d8150d959/dc81ee26-68e3-4127-a13f-1d6c9a472eb6'
        EMAIL_RECIPIENTS  = 'nicolas@ingenia.la'
        ENV = 'dev'
        ECR_REPO = 'edenor-institucional-ecs-dev'
        ACCOUNT_PRD = '191130403174'
        REGION = 'us-east-1'
        S3_BUCKET="elasticbeanstalk-${REGION}-${ACCOUNT_PRD}"
        BEANSTALK_APP='ir-ecs-app-dev'

    }
    
    options {
        office365ConnectorWebhooks([[
                    startNotification: true,
                    notifySuccess:true,
                    notifyAborted:false,
                    notifyNotBuilt:false,
                    notifyUnstable:true,
                    notifyFailure:true,
                    url: env.TEAMS_URL
            ]]
        )
    }
    stages {
        stage("SonarQube Analysis") {
            when {
                anyOf {
                    branch 'none';
                }
            }
            steps {
                script {
                    withSonarQubeEnv("Sonar-OCP") {
                        sh "/usr/local/sonar/bin/sonar-scanner -D'sonar.branch.name=${BRANCH_NAME}'"
                    }
                }
                withSonarQubeEnv("Sonar-OCP") {
                    waitForQualityGate abortPipeline: true
                }
            }
            post {
                success{
                    publishChecks name: 'Sonar', title: 'Sonar Analysis', detailsURL:env.BUILD_URL
                }
                failure {
                    publishChecks conclusion: 'FAILURE', status: 'COMPLETED', name: 'Sonar', title: 'Sonar Analysis', detailsURL:env.BUILD_URL
                    // emailext (
					// 	to: env.EMAIL_RECIPIENTS,
					// 	subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
					// 	body: """<p>FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
					// 	<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
					// 	recipientProviders: [[$class: 'DevelopersRecipientProvider']]
					// )
                }
            }
        }
        stage('Build') {
		            when {
                anyOf {
                    branch 'none';
                    // branch 'qa';
                }
            }
            steps {
                sh 'echo Building'
                script{
                    docker.build '$ECR_REPO-$ENV:$GIT_COMMIT'
                }
            }
            post {
                success{
                    publishChecks name: 'Build', title: 'Build', detailsURL:BUILD_URL
                }
                failure {
                    publishChecks conclusion: 'FAILURE', status: 'COMPLETED', name: 'Build', title: 'Build', detailsURL:env.BUILD_URL
                    emailext (
						to: env.EMAIL_RECIPIENTS,
						subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
						body: """<p>FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
						<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
						recipientProviders: [[$class: 'DevelopersRecipientProvider']]
					)
                }
            }
        }
        stage('Publish') {
            when {
                anyOf {
                    branch 'develop';
                    // branch 'qa';
                }
            }
            steps { 
                script{
                     switch(BRANCH_NAME) {
                        case "develop":
                            env.AWS_CREDENTIALS = 'inversorsAWS_dev'
                            break
                        case "qa":
                            env.AWS_CREDENTIALS = 'inversorsAWS_dev'
                            break
                        case "prod":
                            env.AWS_CREDENTIALS = 'inversorsAWS_dev'
                            break
                        default:
                            env.AWS_CREDENTIALS = 'inversorsAWS_dev'
                            break
                    }
                }
                withAWS(region:env.REGION,credentials:env.AWS_CREDENTIALS) {
			        script{
                        sh 'echo Publishing'
                        // def login = ecrLogin()
			            // sh "${login}"
                        // sh 'docker push $ACCOUNT_PRD.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO-$ENV:$BITBUCKET_COMMIT'
                    }
                }  
            }
        }
        stage('Deploy') {
            when {
                anyOf {
                    branch 'develop';
                    branch 'qa';
                }
            }
            environment {
		        def DATESTAMP= "${sh(script:'date +%Y%m%d%H%M%S', returnStdout: true).trim()}"
                FILENAME="$DATESTAMP-bitbucket_builds.zip"
            }

            steps {
                script{
                     switch(BRANCH_NAME) {
                        case "develop":
                            env.AWS_CREDENTIALS = 'inversorsAWS_dev'
                            break
                        case "qa":
                            env.AWS_CREDENTIALS = 'inversorsAWS_dev'
                            break
                        case "prod":
                            env.AWS_CREDENTIALS = 'inversorsAWS_dev'
                            break
                        default:
                            env.AWS_CREDENTIALS = 'inversorsAWS_dev'
                            break
                    }
                }
                withAWS(region:'us-east-1',credentials:env.AWS_CREDENTIALS) {
                    script{
                        sh 'echo deploying'
                        // def login = ecrLogin()
			            // sh "${login}"
                        sh 'sed -i -e \'s%${ACCOUNT}%\'"$ACCOUNT_PRD"\'%g\' Dockerrun.aws.json'
                        sh 'sed -i -e \'s%${ECR_REPO}%\'"$ECR_REPO"\'%g\' Dockerrun.aws.json' 
                        sh 'sed -i -e \'s%${ENV}%\'"$ENV"\'%g\' Dockerrun.aws.json' 
                        sh 'sed -i -e \'s%${COMMIT_ID}%\'"$GIT_COMMIT"\'%g\' Dockerrun.aws.json' 
                        sh 'zip /tmp/\$FILENAME Dockerrun.aws.json .ebextensions'
                        sh """
                            echo \$FILENAME
                        """
                        ebWaitOnEnvironmentHealth(
                            applicationName: "${BEANSTALK_APP}",
                            environmentName: "ir-ecs-dev-dev",
                            health: "Red",
                            stabilityThreshold: 0
                        )
                        s3Upload(bucket:env.S3_BUCKET, path:"${BEANSTALK_APP}/", file:"/tmp/${FILENAME}")

                        // sh 'docker push $ACCOUNT_PRD.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO-$ENV:$BITBUCKET_COMMIT'
                    }
                }  

            }
            post {
                success {
                    publishChecks name: 'Deploy', title: 'Deploy', detailsURL:env.BUILD_URL
                }
                failure {
                    publishChecks conclusion: 'FAILURE', status: 'COMPLETED', name: 'Deploy', title: 'Deploy', detailsURL:env.BUILD_URL
                    // emailext (
					// 	to: env.EMAIL_RECIPIENTS,
					// 	subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
					// 	body: """<p>FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
					// 	<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
					// 	recipientProviders: [[$class: 'DevelopersRecipientProvider']]
					// )
                }
            }
        }
    }
}
